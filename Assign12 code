import java.util.ArrayList;

public class Restaurant {
    static ArrayList<Food> madeFood;
    private ArrayList<Thread> workers;
    private ArrayList<Thread> customers;

    public Restaurant() {
        madeFood = new ArrayList<>();
        workers = new ArrayList<>();
        customers = new ArrayList<>();
    }

    public void open() {
        Thread f1 = new Thread(new FryCook());
        Thread f2 = new Thread(new FryCook());
        Thread f3 = new Thread(new FryCook());
        Thread f4 = new Thread(new FryCook());
        Thread b1 = new Thread(new BurgerCook());
        Thread b2 = new Thread(new BurgerCook());
        Thread b3 = new Thread(new BurgerCook());

        workers.add(f1);
        workers.add(f2);
        workers.add(f3);
        workers.add(f4);
        workers.add(b1);
        workers.add(b2);
        workers.add(b3);

        for (int index = 0; index < workers.size(); index++) {
            workers.get(index).start();
        }
    }

    public void openDoors() {
        Thread[] c = new Thread[100];
        for (int index = 0; index < 100; index++) {
            c[index] = new Thread(new Customer());
            customers.add(c[index]);
            try {
                customers.get(index).start();
                Thread.sleep(50);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

    }

    public void currentCookedFood() {
        int x = 0;
        int y = 0;

        for (int index = 0; index < madeFood.size(); index++) {

            if (madeFood.get(index) instanceof Burgers) {
                y++;
            }

            if (madeFood.get(index) instanceof Fries) {
                x++;
            }
            System.out.println("Currently we have " + x + " fries, and " + y + " burgers");

        }

    }


    public static void main(String[] args) {
        Restaurant stingers = new Restaurant();
        System.out.println("We are open!");
        stingers.open();
        stingers.openDoors();
        for (int index = 0; index < 10; index++) {

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            stingers.currentCookedFood();
        }

        System.out.println("We are closed");

    }

}

public class Burgers extends Food {

}

public class FryCook extends Restaurant implements Runnable {
    private int id;
    private static int next_burgercook_id = 1;

    public FryCook() {
        this.id = next_burgercook_id++;
        next_burgercook_id++;
    }

    @Override
    public void run() {
        System.out.println("Fry cook #" + id + " is starting to cook");

        for (int index = 0; index < 50; index++) {
            System.out.println("Fry cook #" + id + " cooked fries");
            Fries fries = new Fries();
            madeFood.add(fries);

            int x = ((int) (Math.random() * (1000 - 1))) + 1;
            try {
                Thread.sleep(x);
            } catch (InterruptedException e) {
                System.out.println(e.getMessage());
            }

        }

    }

}

public abstract class Food {

}

public class Fries extends Food {

}

public class Customer extends Restaurant implements Runnable {
    private int id;
    private static int next_customer_id = 1;
Customer() {
        this.id = next_customer_id++;
    }

    public void eatBurger() {
        System.out.println("Customer " + id + " wants burger");
        Burgers burgerToRemove=null;
        for (int index = 0; index < madeFood.size(); index++) {
            if (madeFood.get(index) instanceof Burgers) {
                burgerToRemove=(Burgers) madeFood.get(index);
                break;
            }
        }
        if (burgerToRemove == null)
            System.out.println("Oh no, we are out of Burgers!!!");
        else
            madeFood.remove(burgerToRemove);

    }

    public void eatFries() {
        System.out.println("Customer " + id + " wants fries");
        Fries friesToRemove=null;

        for (int index = 0; index < madeFood.size(); index++) {

            if (madeFood.get(index) instanceof Fries) {
                friesToRemove = (Fries) madeFood.get(index);
                break;
            }
        }


        if (friesToRemove == null) {
            System.out.println("Oh no, we are out of Fries!!!");
        }
        else
            madeFood.remove(friesToRemove);

    }

    @Override
    public void run() {
        System.out.println("Customer "+id+" has shown up");
        int sleepTime = ((int) (Math.random() * (3 - 2))) + 2;
        try {
            Thread.sleep(sleepTime);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int customerChoice = ((int) (Math.random() * (3 - 0))) + 0;
        if (customerChoice == 0) {
            eatBurger();
        } else if (customerChoice == 1) {
            eatBurger();
            eatFries();
        } else if (customerChoice == 2) {
            eatFries();
        }

    }

}

public class BurgerCook extends Restaurant implements Runnable {
    private int id;
    private static int next_burgercook_id = 1;

    public BurgerCook() {
        this.id = next_burgercook_id++;
    }

    @Override
    public void run() {
        System.out.println("Burger cook #" + id + " is starting to cook");

        for (int index = 0; index < 50; index++) {
            System.out.println("Burger cook #" + id + " cooked a burger");
            Burgers burgers = new Burgers();
            madeFood.add(burgers);

            int x = ((int) (Math.random() * (1000 - 1))) + 1;
            try {
                Thread.sleep(x);
            } catch (InterruptedException e) {
                System.out.println(e.getMessage());

            }

        }

    }

}
